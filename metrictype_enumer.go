// Code generated by "enumer -type=MetricType -text -json -linecomment"; DO NOT EDIT.

//
package shimesaba

import (
	"encoding/json"
	"fmt"
)

const _MetricTypeName = "hostservice"

var _MetricTypeIndex = [...]uint8{0, 4, 11}

func (i MetricType) String() string {
	i -= 1
	if i < 0 || i >= MetricType(len(_MetricTypeIndex)-1) {
		return fmt.Sprintf("MetricType(%d)", i+1)
	}
	return _MetricTypeName[_MetricTypeIndex[i]:_MetricTypeIndex[i+1]]
}

var _MetricTypeValues = []MetricType{1, 2}

var _MetricTypeNameToValueMap = map[string]MetricType{
	_MetricTypeName[0:4]:  1,
	_MetricTypeName[4:11]: 2,
}

// MetricTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MetricTypeString(s string) (MetricType, error) {
	if val, ok := _MetricTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MetricType values", s)
}

// MetricTypeValues returns all values of the enum
func MetricTypeValues() []MetricType {
	return _MetricTypeValues
}

// IsAMetricType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MetricType) IsAMetricType() bool {
	for _, v := range _MetricTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MetricType
func (i MetricType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MetricType
func (i *MetricType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MetricType should be a string, got %s", data)
	}

	var err error
	*i, err = MetricTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MetricType
func (i MetricType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MetricType
func (i *MetricType) UnmarshalText(text []byte) error {
	var err error
	*i, err = MetricTypeString(string(text))
	return err
}
